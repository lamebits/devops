1. Prepare GitHub Repo
	1. https://github.com/hkhcoder/iac-vprofile
	2. https://github.com/hkhcoder/vprofile-action
2. ssh-keygen
3. copy public key and add into github SSH key.
4. export GIT_SSH_COMMAND="ssh -i ~/.ssh/actions" 	//actions is private key
5. clone both the repos.
	1. git clone git@github.com:lamebits/iac-vprofile.git
	2. git clone git@github.com:lamebits/vprofile-action.git
6. run below command inside the iac-vprofile and vprofile-action folders.
	git config core.sshCommand "ssh -i ~/.ssh/actions -F /dev/null"
7. git config --global user.name lamebits
8. git config --global user.email meenalmate1663@gmail.com
9. Create IAM User, S3, Elastic Container Registory (ECR) in AWS and copy Access and Secret Key of IAM use in to Github Setting -> Secret and variables -> Actions -> New Repository Secret
	a. AWS_ACCESS_KEY_ID
	b. AWS_SECRET_ACCESS_KEY
	c. BUCKET_TF_STATE: (for iac-vprofile only)<bucketname>
	d. REGISTORY: (for vprofile-action only)<ECRname>
10. modify and commit terraform code which is present in iac-vprofile.
11. Github Actions [Workflows]
	11.1 Open VSCODE for folder iac-vprofile
	11.2 create folder ".github/workflows"
	11.3 create terraform.yml file in workflows folder.
name: "Vprofile IAC"	
on:
  push:
    branches:
      - main
      - stage
    paths:
      terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
# Credential for deplomenet in AWS
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
# S3 bucket for the Terraform State
  BUCKET_TF_STATE: ${{secrets.BUCKET_TF_STATE}}
  AWS_REGION: us-east-1
  EKS_CLUSTER: vprofile-eks


jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on runner
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: "1.9.8"

      - name: Terraform Init
        id: init 
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      #- name: Terraform Validation
      #  id: validate
      #  run: terraform validate
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1 
		
	  - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/head/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
     
      - name: Get Kube config file
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }} 

      - name: Install Ingress controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
		
		11.4 git add .
		11.5 git commit -m "staging workflow"
		11.6 git push origin stage

12. git merger stage 
13. git checkout stage
14. git checkout main
15. git merge main
16. Create SonarCloud Organisation "vprofile-actions-29"
17. Create Project vprofile13
18. Generate token and save in github vprofile-action repository actions secret.
	a. SONAR_TOKEN
	b. SONAR_ORGANISATION
	C. SONAR_PROJECT_KEY
	d. SONAR_URL : https://sonarcloud.io
19. Open vprofile-action folder in VSCODE	
	19.1 Create .github/workflow folder	
	19.2 Create main.yml file in workflow folder
	name: vprofile actions
	on: workflow_dispatch
	env:
		AWS_REGION: us-east-2
		ECR_REPOSITORY: vprofileapp
		EKS_CLUSTER: vprofile-eks

	jobs:
		Testing:
			runs-on: ubuntu-latest
		steps:
			- name: Code checkout
			  uses: actions/checkout@v4

			- name: Maven test
			  run: mvn test

			- name: Checkstyle
			  run: mvn checkstyle:checkstyle

			# Setup java 11 to be default (sonar-scanner requirement as of 5.x)
			- name: Set Java 11
			  uses: actions/setup-java@v3
			  with:
				distribution: 'temurin' # See 'Supported distributions' for available options
				java-version: '11'

			# Setup sonar-scanner
			- name: Setup SonarQube
			  uses: warchant/setup-sonar-scanner@v7


			# Run sonar-scanner
			- name: SonarQube Scan
			  run: sonar-scanner
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src/
            -Dsonar.junit.reportsPath=target/surefire-reports/ 
            -Dsonar.jacoco.reportsPath=target/jacoco.exec 
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/  

			# Check the Quality Gate status.
			- name: SonarQube Quality Gate check
			  id: sonarqube-quality-gate-check
			  uses: sonarsource/sonarqube-quality-gate-action@master
			  # Force to fail step after specific time.
			  timeout-minutes: 5
			  env:
				SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
				SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL
				
		BUILD_AND_PUBLISH:   
			needs: Testing //run after Testing Job.
			runs-on: ubuntu-latest
			steps:
				- name: Code checkout
				  uses: actions/checkout@v4

			    - name: Build & Upload image to ECR
			      uses: appleboy/docker-ecr-action@master
			      with:
				    access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
					secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
					registry: ${{ secrets.REGISTRY }}
					repo: ${{ env.ECR_REPOSITORY }}
					region: ${{ env.AWS_REGION }}
					tags: latest,${{ github.run_number }}
					daemon_off: false
					dockerfile: ./Dockerfile
					context: ./
					
		DeployToEKS:
			needs: BUILD_AND_PUBLISH
			runs-on: ubuntu-latest
			steps:
				- name: Code checkout
				  uses: actions/checkout@v4

				- name: Configure AWS credentials
				  uses: aws-actions/configure-aws-credentials@v1
				  with:
					aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
					aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
					aws-region: ${{ env.AWS_REGION }}

				- name: Get Kube config file
				  run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

				- name: Print config file
				  run: cat ~/.kube/config

				- name: Login to ECR
                  run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTORY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password) 

				- name: Deploy Helm
				  uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
				  with:
					aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
					aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
					aws-region: ${{ env.AWS_REGION }}
					cluster-name: ${{ env.EKS_CLUSTER }}
					#config-files: .github/values/dev.yaml
					chart-path: helm/vprofilecharts
					namespace: default
					values: appimage=${{ secrets.REGISTORY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
					name: vprofile-stack    


				
20. Create Quality Gate with rules bugs > 50 and select the project.
21. commit and push but as workflow_dispatch it will showing button on github actions and from where manual trigger the workflow.    
22. Deploy Kubernetes files
	22.1 Open Powershell : choco install kubernetes-helm
	22.2 Open gitbash in vprofile-actions folder
		-> helm create vprofilecharts
	22.3 open templates folder and remove all default .yml templates files and paste kubernetes folder templates.
	22.4 

	